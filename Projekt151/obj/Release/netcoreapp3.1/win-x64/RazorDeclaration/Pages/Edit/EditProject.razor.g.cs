#pragma checksum "C:\Users\miche\source\repos\Projekt151\Projekt151\Pages\Edit\EditProject.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a77a3b0d690829ba6377bbd506c36082610e36e5"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Projekt151.Pages.Edit
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Projekt151;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Projekt151.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\miche\source\repos\Projekt151\Projekt151\_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\miche\source\repos\Projekt151\Projekt151\Pages\Edit\EditProject.razor"
using System.Globalization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\miche\source\repos\Projekt151\Projekt151\Pages\Edit\EditProject.razor"
using Projekt151.Model;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/editproject/{id:int}")]
    public partial class EditProject : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 88 "C:\Users\miche\source\repos\Projekt151\Projekt151\Pages\Edit\EditProject.razor"
        
    [Parameter]
    public int id { get;set; }
    ProjectFormatted formattedProject = new ProjectFormatted();
    IEnumerable<Kategorie> categories;
    IEnumerable<Tasks> tasks;
    IEnumerable<Mitarbeiter> employees;
    List<Tasks> selectedTaks = new List<Tasks>();
    List<Mitarbeiter> selectedEmployees = new List<Mitarbeiter>();
    List<string> employeeNum = new List<string>();
    List<string> tasksNum = new List<string>();
    string taskString = "";
    string employeeString = "";
    DateTime? StartValue;
    DateTime? EndValue;

    IList<string> multipleEmployees = new List<string>();
    IEnumerable<string> mEmployees;
    IList<int> multipleTasks = new List<int>();
    IEnumerable<int> mTasks;

    protected override async Task OnInitializedAsync()
    {
        categories = await CategoryService.GetCategories();
        formattedProject = await ProjectService.SingleProject(id);
        tasks = await TaskService.GetTasks();
        employees = await EmployeeService.GetEmployees();
        mTasks = GetTasks();
        mEmployees = GetEmployees();
        StartValue = DateTime.Parse(formattedProject.StartDate);
        EndValue = DateTime.Parse(formattedProject.EndDate);
    }

    private IEnumerable<string> GetEmployees()
    {
        foreach (var e in formattedProject.Mitarbeiters)
        {
            multipleEmployees.Add(e.MitarbeiterId);
        }
        return multipleEmployees.AsEnumerable<string>();
    }

    private IEnumerable<int> GetTasks()
    {
        foreach (var t in formattedProject.Tasks)
        {
            multipleTasks.Add(t.TaskId);
        }
        return multipleTasks.AsEnumerable<int>();
    }

    public async Task UpdateProject()
    {
        getTasksAndEmployeesSelected();
        formattedProject.IsGoing = true;
        formattedProject.Tasks = selectedTaks;
        formattedProject.Mitarbeiters = selectedEmployees;
        await ProjectService.EditProject(id, formattedProject);
        NavigationManager.NavigateTo("listprojects");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("listprojects");
    }

    void OnChange(DateTime? value, string name, string format)
    {
        if (name == "StartPicker")
        {
            formattedProject.StartDate = value?.ToString(format);
        }
        else
        {
            formattedProject.EndDate = value?.ToString(format);
        }
    }

    void getTasksAndEmployeesSelected()
    {
        foreach (var t in tasksNum)
        {
            foreach (var ta in tasks)
            {
                if (t == ta.TaskId.ToString())
                {
                    selectedTaks.Add(ta);
                }
            }
        }
        foreach (var e in employeeNum)
        {
            foreach (var em in employees)
            {
                if (e == em.MitarbeiterId.ToString())
                {
                    selectedEmployees.Add(em);
                }
            }
        }
    }

    void OnChange(object value, string name)
    {
        if (name == "MitarbeiterName")
        {
            employeeString = string.Join(",", ((IEnumerable<string>)value));
        }
        else
        {
            taskString = string.Join(",", ((IEnumerable<int>)value));
        }
        employeeNum = employeeString.Split(",").ToList();
        tasksNum = taskString.Split(",").ToList();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.ITasksService TaskService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IKategorieService CategoryService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IMitarbeiterService EmployeeService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Services.IProjektService ProjectService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
    }
}
#pragma warning restore 1591
